//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""945886d6-e2cd-4b46-9e96-8915cd8853e9"",
            ""actions"": [
                {
                    ""name"": ""MovementAxis"",
                    ""type"": ""Value"",
                    ""id"": ""5af368bd-e50d-4b85-80a0-c6396c995ee0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d17073bd-7f2d-48f1-9c93-cc664a2b4af1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1a44b892-4f41-4abb-a874-e87033029163"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Movement"",
                    ""action"": ""MovementAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e5e4ba82-74ed-49d4-b587-c541c3c4ace8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Movement"",
                    ""action"": ""MovementAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cce22aed-2d1b-419d-9d8f-0c93b3ba0143"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Movement"",
                    ""action"": ""MovementAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2135e99e-2b01-4d60-a757-5f57feec90ba"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Movement"",
                    ""action"": ""MovementAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""a915bcb4-bde5-4958-a005-707703bcd6b5"",
            ""actions"": [
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""52e61c3d-6e5b-4c41-9652-f1d0b6c69fbf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""e7b2b213-e5cc-4e6d-a5ad-adfe8cd49892"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRightClick"",
                    ""type"": ""Button"",
                    ""id"": ""3143bceb-ee20-449c-89cd-bd5dcbe96580"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""39b3612f-0db9-4815-9a1f-8fa21a068e16"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bde96fd-a77e-4a44-bd47-1b1a81f969de"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""634c4175-da09-4174-ad94-e52467cd1ce4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Skill"",
            ""id"": ""5f3c63d9-d441-42ad-8b48-d01976a1a8c2"",
            ""actions"": [
                {
                    ""name"": ""Sword"",
                    ""type"": ""Button"",
                    ""id"": ""61f83aa9-67b2-4cfb-af76-bbed51ee38f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""c3a80107-0e8d-438d-a63d-03da8769db2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Telekinesis"",
                    ""type"": ""Button"",
                    ""id"": ""37209d8b-6894-4673-9283-1d0005723914"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38ad2acc-79ea-431c-adab-0ae3cbd4699e"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sword"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac12e982-5cfa-40dc-9b62-45ef09dd2bc4"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23093bf5-9634-4a8d-b2a9-9487256688f8"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Telekinesis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Create"",
            ""id"": ""0053e8bf-0f36-4623-8787-951a49846700"",
            ""actions"": [
                {
                    ""name"": ""Knife"",
                    ""type"": ""Button"",
                    ""id"": ""f7eb222c-2727-4adf-921e-ced896ba4f35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6843c5f4-06f0-4ae7-b6a4-4f5b6f507f8d"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Knife"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interact"",
            ""id"": ""44f1b48f-8d5f-431f-9316-1ca2de584420"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""fe10025d-55f2-427d-bcd2-04bc7f16776e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8bf0ffde-930c-43ff-a327-f937e685db8f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Movement"",
            ""bindingGroup"": ""Movement"",
            ""devices"": []
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_MovementAxis = m_Movement.FindAction("MovementAxis", throwIfNotFound: true);
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_Mouse = m_Mouse.FindAction("Mouse", throwIfNotFound: true);
        m_Mouse_MouseClick = m_Mouse.FindAction("MouseClick", throwIfNotFound: true);
        m_Mouse_MouseRightClick = m_Mouse.FindAction("MouseRightClick", throwIfNotFound: true);
        // Skill
        m_Skill = asset.FindActionMap("Skill", throwIfNotFound: true);
        m_Skill_Sword = m_Skill.FindAction("Sword", throwIfNotFound: true);
        m_Skill_Fire = m_Skill.FindAction("Fire", throwIfNotFound: true);
        m_Skill_Telekinesis = m_Skill.FindAction("Telekinesis", throwIfNotFound: true);
        // Create
        m_Create = asset.FindActionMap("Create", throwIfNotFound: true);
        m_Create_Knife = m_Create.FindAction("Knife", throwIfNotFound: true);
        // Interact
        m_Interact = asset.FindActionMap("Interact", throwIfNotFound: true);
        m_Interact_Interact = m_Interact.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_MovementAxis;
    public struct MovementActions
    {
        private @PlayerControls m_Wrapper;
        public MovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementAxis => m_Wrapper.m_Movement_MovementAxis;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @MovementAxis.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovementAxis;
                @MovementAxis.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovementAxis;
                @MovementAxis.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovementAxis;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovementAxis.started += instance.OnMovementAxis;
                @MovementAxis.performed += instance.OnMovementAxis;
                @MovementAxis.canceled += instance.OnMovementAxis;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Mouse
    private readonly InputActionMap m_Mouse;
    private IMouseActions m_MouseActionsCallbackInterface;
    private readonly InputAction m_Mouse_Mouse;
    private readonly InputAction m_Mouse_MouseClick;
    private readonly InputAction m_Mouse_MouseRightClick;
    public struct MouseActions
    {
        private @PlayerControls m_Wrapper;
        public MouseActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse => m_Wrapper.m_Mouse_Mouse;
        public InputAction @MouseClick => m_Wrapper.m_Mouse_MouseClick;
        public InputAction @MouseRightClick => m_Wrapper.m_Mouse_MouseRightClick;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterface != null)
            {
                @Mouse.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouse;
                @MouseClick.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseClick;
                @MouseClick.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseClick;
                @MouseClick.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseClick;
                @MouseRightClick.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseRightClick;
                @MouseRightClick.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseRightClick;
                @MouseRightClick.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseRightClick;
            }
            m_Wrapper.m_MouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
                @MouseRightClick.started += instance.OnMouseRightClick;
                @MouseRightClick.performed += instance.OnMouseRightClick;
                @MouseRightClick.canceled += instance.OnMouseRightClick;
            }
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // Skill
    private readonly InputActionMap m_Skill;
    private ISkillActions m_SkillActionsCallbackInterface;
    private readonly InputAction m_Skill_Sword;
    private readonly InputAction m_Skill_Fire;
    private readonly InputAction m_Skill_Telekinesis;
    public struct SkillActions
    {
        private @PlayerControls m_Wrapper;
        public SkillActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Sword => m_Wrapper.m_Skill_Sword;
        public InputAction @Fire => m_Wrapper.m_Skill_Fire;
        public InputAction @Telekinesis => m_Wrapper.m_Skill_Telekinesis;
        public InputActionMap Get() { return m_Wrapper.m_Skill; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkillActions set) { return set.Get(); }
        public void SetCallbacks(ISkillActions instance)
        {
            if (m_Wrapper.m_SkillActionsCallbackInterface != null)
            {
                @Sword.started -= m_Wrapper.m_SkillActionsCallbackInterface.OnSword;
                @Sword.performed -= m_Wrapper.m_SkillActionsCallbackInterface.OnSword;
                @Sword.canceled -= m_Wrapper.m_SkillActionsCallbackInterface.OnSword;
                @Fire.started -= m_Wrapper.m_SkillActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_SkillActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_SkillActionsCallbackInterface.OnFire;
                @Telekinesis.started -= m_Wrapper.m_SkillActionsCallbackInterface.OnTelekinesis;
                @Telekinesis.performed -= m_Wrapper.m_SkillActionsCallbackInterface.OnTelekinesis;
                @Telekinesis.canceled -= m_Wrapper.m_SkillActionsCallbackInterface.OnTelekinesis;
            }
            m_Wrapper.m_SkillActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Sword.started += instance.OnSword;
                @Sword.performed += instance.OnSword;
                @Sword.canceled += instance.OnSword;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Telekinesis.started += instance.OnTelekinesis;
                @Telekinesis.performed += instance.OnTelekinesis;
                @Telekinesis.canceled += instance.OnTelekinesis;
            }
        }
    }
    public SkillActions @Skill => new SkillActions(this);

    // Create
    private readonly InputActionMap m_Create;
    private ICreateActions m_CreateActionsCallbackInterface;
    private readonly InputAction m_Create_Knife;
    public struct CreateActions
    {
        private @PlayerControls m_Wrapper;
        public CreateActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Knife => m_Wrapper.m_Create_Knife;
        public InputActionMap Get() { return m_Wrapper.m_Create; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CreateActions set) { return set.Get(); }
        public void SetCallbacks(ICreateActions instance)
        {
            if (m_Wrapper.m_CreateActionsCallbackInterface != null)
            {
                @Knife.started -= m_Wrapper.m_CreateActionsCallbackInterface.OnKnife;
                @Knife.performed -= m_Wrapper.m_CreateActionsCallbackInterface.OnKnife;
                @Knife.canceled -= m_Wrapper.m_CreateActionsCallbackInterface.OnKnife;
            }
            m_Wrapper.m_CreateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Knife.started += instance.OnKnife;
                @Knife.performed += instance.OnKnife;
                @Knife.canceled += instance.OnKnife;
            }
        }
    }
    public CreateActions @Create => new CreateActions(this);

    // Interact
    private readonly InputActionMap m_Interact;
    private IInteractActions m_InteractActionsCallbackInterface;
    private readonly InputAction m_Interact_Interact;
    public struct InteractActions
    {
        private @PlayerControls m_Wrapper;
        public InteractActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Interact_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Interact; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractActions set) { return set.Get(); }
        public void SetCallbacks(IInteractActions instance)
        {
            if (m_Wrapper.m_InteractActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_InteractActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_InteractActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_InteractActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_InteractActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public InteractActions @Interact => new InteractActions(this);
    private int m_MovementSchemeIndex = -1;
    public InputControlScheme MovementScheme
    {
        get
        {
            if (m_MovementSchemeIndex == -1) m_MovementSchemeIndex = asset.FindControlSchemeIndex("Movement");
            return asset.controlSchemes[m_MovementSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnMovementAxis(InputAction.CallbackContext context);
    }
    public interface IMouseActions
    {
        void OnMouse(InputAction.CallbackContext context);
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMouseRightClick(InputAction.CallbackContext context);
    }
    public interface ISkillActions
    {
        void OnSword(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnTelekinesis(InputAction.CallbackContext context);
    }
    public interface ICreateActions
    {
        void OnKnife(InputAction.CallbackContext context);
    }
    public interface IInteractActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
